{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAE/B,OADsBC,KAAKC,SAAW,GAE7BC,QAAQC,QAAQ,CAACL,WAAUC,UAE3BG,QAAQE,OAAO,CAACN,WAAUC,S,CAIrCM,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAAC,GACzDA,EAAMC,iBAEN,IAAMC,EAAQC,OAAON,SAASC,cAAc,qBAAqBM,OAC3DC,EAAOF,OAAON,SAASC,cAAc,oBAAoBM,OACzDE,EAASH,OAAON,SAASC,cAAc,sBAAsBM,OAE/DF,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EACpCC,SAASC,OAAOC,QAAS,sCAI3BC,YAAW,WACT,IAAIC,EAAU,EAEdtB,EAAcsB,EAAST,GAAOU,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAC9CgB,SAASO,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvE0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBgB,SAASO,OAAOL,QAAQ,sBAAuCO,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGvE,IAAI2B,EAAQC,aAAY,WAClBR,GAAWL,EACbc,cAAcF,GAKhB7B,IADAsB,EACuBT,EAAQG,GAAQM,EAAU,IAAIC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACrEgB,SAASO,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvE0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBgB,SAASO,OAAOL,QAAQ,sBAAqCO,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,MAEpEc,E,GACFH,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    return Promise.resolve({position, delay});\n  } else {\n    return Promise.reject({position, delay});\n  }\n}\n\ndocument.querySelector('.form').addEventListener('submit', event =>{\n  event.preventDefault();\n\n  const delay = Number(document.querySelector('input[name=delay]').value);\n  const step = Number(document.querySelector('input[name=step]').value);\n  const amount = Number(document.querySelector('input[name=amount]').value);\n\n  if (delay < 0 || step < 0 || amount < 0){\n    Notiflix.Report.failure(`Only positive integers are allowed`);\n    return;\n  }\n\n  setTimeout(()=>{\n    let counter = 1;\n\n    createPromise(counter, delay).then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    let timer = setInterval(()=>{\n      if (counter >= amount){\n        clearInterval(timer);\n        return;\n      }\n      \n      counter++;\n      createPromise(counter, delay + step * (counter - 1)).then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }, step);\n  }, delay);\n});"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","event","preventDefault","delay1","Number","value","step","amount","Notiflix","Report","failure","setTimeout","counter","then","param","Notify","success","concat","catch","timer","setInterval","clearInterval"],"version":3,"file":"03-promises.6435370b.js.map"}