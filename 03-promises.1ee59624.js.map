{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAE/B,OADsBC,KAAKC,SAAW,GAE7BC,QAAQC,QAAQ,C,SAACL,E,MAAUC,IAE3BG,QAAQE,OAAO,C,SAACN,E,MAAUC,G,CAIrCM,SAASC,cAAc,SAASC,iBAAiB,UAAUC,IACzDA,EAAMC,iBAEN,MAAMC,EAAQC,OAAON,SAASC,cAAc,qBAAqBM,OAC3DC,EAAOF,OAAON,SAASC,cAAc,oBAAoBM,OACzDE,EAASH,OAAON,SAASC,cAAc,sBAAsBM,OAE/DF,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EACpCC,SAASC,OAAOC,QAAQ,sCAI1BC,YAAW,KACT,IAAIC,EAAU,EAEdtB,EAAcsB,EAAST,GAAOU,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MAC9CgB,SAASM,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBgB,SAASM,OAAOJ,QAAQ,sBAAoBnB,QAAiBC,MAAU,IAGzE,IAAIyB,EAAQC,aAAY,KAClBN,GAAWL,EACbY,cAAcF,IAIhBL,IACAtB,EAAcsB,EAAST,EAAQG,GAAQM,EAAU,IAAIC,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACrEgB,SAASM,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBgB,SAASM,OAAOJ,QAAQ,sBAAoBnB,QAAeC,MAAU,IACrE,GACDc,EAAK,GACPH,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    return Promise.resolve({position, delay});\n  } else {\n    return Promise.reject({position, delay});\n  }\n}\n\ndocument.querySelector('.form').addEventListener('submit', event =>{\n  event.preventDefault();\n\n  const delay = Number(document.querySelector('input[name=delay]').value);\n  const step = Number(document.querySelector('input[name=step]').value);\n  const amount = Number(document.querySelector('input[name=amount]').value);\n\n  if (delay < 0 || step < 0 || amount < 0){\n    Notiflix.Report.failure(`Only positive integers are allowed`);\n    return;\n  }\n\n  setTimeout(()=>{\n    let counter = 1;\n\n    createPromise(counter, delay).then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    let timer = setInterval(()=>{\n      if (counter >= amount){\n        clearInterval(timer);\n        return;\n      }\n      \n      counter++;\n      createPromise(counter, delay + step * (counter - 1)).then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }, step);\n  }, delay);\n});"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","event","preventDefault","delay1","Number","value","step","amount","Notiflix","Report","failure","setTimeout","counter","then","Notify","success","catch","timer","setInterval","clearInterval"],"version":3,"file":"03-promises.1ee59624.js.map"}